--- lxc-debian-0.7.5-5-debian	2013-06-04 21:28:07.232267000 +0000
+++ lxc-debian-wheezy-robvdhoeven	2013-06-04 21:28:07.232629000 +0000
@@ -20,8 +20,10 @@
 # License along with this library; if not, write to the Free Software
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 
-SUITE=${SUITE:-squeeze}
-MIRROR=${MIRROR:-http://cdn.debian.net/debian}
+# ==============================================================
+# This is a slightly modified version by Rob van der Hoeven
+# I use it for my FreedomBox project: http://freedomboxblog.nl
+# ==============================================================
 
 configure_debian()
 {
@@ -38,7 +40,7 @@
 
     # configure the inittab
     cat <<EOF > $rootfs/etc/inittab
-id:2:initdefault:
+id:3:initdefault:
 si::sysinit:/etc/init.d/rcS
 l0:0:wait:/etc/init.d/rc 0
 l1:1:wait:/etc/init.d/rc 1
@@ -56,15 +58,6 @@
 c4:12345:respawn:/sbin/getty 38400 tty4 linux
 EOF
 
-    # add daemontools-run entry
-    if [ -e $rootfs/var/lib/dpkg/info/daemontools.list ]; then
-        cat <<EOF >> $rootfs/etc/inittab
-#-- daemontools-run begin
-SV:123456:respawn:/usr/bin/svscanboot
-#-- daemontools-run end
-EOF
-    fi
-
     # disable selinux in debian
     mkdir -p $rootfs/selinux
     echo 0 > $rootfs/selinux/enforce
@@ -83,42 +76,28 @@
 $hostname
 EOF
 
-    # reconfigure some services
-    LANG="${LANG:-en_US.UTF-8}"
+    # let dhcp client report the hostname to dnsmasq
+    cat <<EOF >> $rootfs/etc/dhcp/dhclient.conf
+send host-name "$hostname";
+send vendor-class-identifier "lxc.module";
+EOF
 
-    locale="$LANG $(echo $LANG | cut -d. -f2)"
-    chroot $rootfs echo "locales locales/default_environment_locale select $LANG" | chroot $rootfs sh -c "LANG=C debconf-set-selections"
-    chroot $rootfs echo "locales locales/default_environment_locale seen true" | chroot $rootfs sh -c "LANG=C debconf-set-selections"
-    chroot $rootfs echo "locales locales/locales_to_be_generated seen true" | chroot $rootfs sh -c "LANG=C debconf-set-selections"
-    chroot $rootfs sed -i -e "0,/^[# ]*$locale *$/ s/^[# ]*$locale *$/$locale/" /etc/locale.gen
-    chroot $rootfs sh -c "LANG=C dpkg-reconfigure locales -f noninteractive"
+    # reconfigure some services
+    if [ -z "$LANG" ]; then
+	chroot $rootfs locale-gen en_US.UTF-8
+	chroot $rootfs update-locale LANG=en_US.UTF-8
+    else
+	chroot $rootfs locale-gen $LANG
+	chroot $rootfs update-locale LANG=$LANG
+    fi
 
     # remove pointless services in a container
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d -f checkroot.sh remove" # S
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d checkroot.sh stop 09 S ."
-
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d -f umountfs remove" # 0 6
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d umountfs start 09 0 6 ."
+    chroot $rootfs /usr/sbin/update-rc.d -f umountfs remove
+    chroot $rootfs /usr/sbin/update-rc.d -f hwclock.sh remove
+    chroot $rootfs /usr/sbin/update-rc.d -f hwclockfirst.sh remove
 
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d -f umountroot remove" # 0 6
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d umountroot start 10 0 6 ."
-
-    # The following initscripts don't provide an empty start or stop block.
-    # To prevent them being enabled on upgrades, we leave a start link on
-    # runlevel 3.
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d -f hwclock.sh remove" # S 0 6
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d hwclock.sh start 10 3 ."
-
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d -f hwclockfirst.sh remove" # S
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d hwclockfirst start 08 3 ."
-
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d -f module-init-tools remove" # S
-    chroot $rootfs "LANG=C /usr/sbin/update-rc.d module-init-tools start 10 3 ."
-
-    password="$(dd if=/dev/urandom bs=6 count=1 2> /dev/null | base64)"
-
-    echo "root:$password" | chroot $rootfs chpasswd
-    echo "Root password is '$password', please change !"
+    echo "root:root" | chroot $rootfs chpasswd
+    echo "Root password is 'root', please change !"
 
     return 0
 }
@@ -130,7 +109,7 @@
 locales,\
 libui-dialog-perl,\
 dialog,\
-dhcp3-client,\
+isc-dhcp-client,\
 netbase,\
 net-tools,\
 iproute,\
@@ -140,23 +119,23 @@
     arch=$2
 
     # check the mini debian was not already downloaded
-    mkdir -p "$cache/partial-$SUITE-$arch"
+    mkdir -p "$cache/partial-$arch"
     if [ $? -ne 0 ]; then
-	echo "Failed to create '$cache/partial-$SUITE-$arch' directory"
+	echo "Failed to create '$cache/partial-$arch' directory"
 	return 1
     fi
 
     # download a mini debian into a cache
     echo "Downloading debian minimal ..."
     debootstrap --verbose --variant=minbase --arch=$arch \
-	--include=$packages \
-	"$SUITE" "$cache/partial-$SUITE-$arch" $MIRROR
+	--include $packages \
+	wheezy $cache/partial-$arch http://ftp.debian.org/debian
     if [ $? -ne 0 ]; then
 	echo "Failed to download the rootfs, aborting."
 	return 1
     fi
 
-    mv "$1/partial-$SUITE-$arch" "$1/rootfs-$SUITE-$arch"
+    mv "$1/partial-$arch" "$1/rootfs-$arch"
     echo "Download complete."
 
     return 0
@@ -170,13 +149,13 @@
 
     # make a local copy of the minidebian
     echo -n "Copying rootfs to $rootfs..."
-    cp -a "$cache/rootfs-$SUITE-$arch" $rootfs || return 1
+    cp -a $cache/rootfs-$arch $rootfs || return 1
     return 0
 }
 
 install_debian()
 {
-    cache="/var/cache/lxc/debian"
+    cache="/var/cache/lxc/debian-wheezy"
     rootfs=$1
     mkdir -p /var/lock/subsys/
     (
@@ -186,22 +165,21 @@
 	    return 1
 	fi
 
-	# Code taken from debootstrap
-	if [ -x /usr/bin/dpkg ] && /usr/bin/dpkg --print-architecture >/dev/null 2>&1; then
-	    arch=`/usr/bin/dpkg --print-architecture`
-	elif type udpkg >/dev/null 2>&1 && udpkg --print-architecture >/dev/null 2>&1; then
-	    arch=`/usr/bin/udpkg --print-architecture`
-	else
 	    arch=$(arch)
-	    case $arch in
-		686)           arch="i386";;
-		x86_64)        arch="amd64";;
-		ppc)           arch="powerpc";;
-	    esac
+	if [ "$arch" == "x86_64" ]; then
+	    arch=amd64
+	fi
+
+	if [ "$arch" == "i686" ]; then
+	    arch=i386
 	fi
 
-	echo "Checking cache download in $cache/rootfs-$SUITE-$arch ... "
-	if [ ! -e "$cache/rootfs-$SUITE-$arch" ]; then
+	if [ "$arch" == "armv5tel" ]; then
+	    arch=armel
+	fi
+
+	echo "Checking cache download in $cache/rootfs-$arch ... "
+	if [ ! -e "$cache/rootfs-$arch" ]; then
 	    download_debian $cache $arch
 	    if [ $? -ne 0 ]; then
 		echo "Failed to download 'debian base'"
@@ -228,27 +206,15 @@
     rootfs=$2
     name=$3
 
-    cat >> $path/config << EOF
-# $path/config
-
-## Container
-lxc.utsname                             = $name
-lxc.rootfs                              = $rootfs
+    cat <<EOF >> $path/config
 lxc.tty                                 = 4
 lxc.pts                                 = 1024
-#lxc.console                            = /var/log/lxc/$name.console
-
-## Capabilities
-lxc.cap.drop                            = sys_admin
-
-## Devices
-#lxc.cgroup.devices.allow               = a
+lxc.rootfs = $rootfs
 lxc.cgroup.devices.deny                 = a
-# /dev/null
+# /dev/null and zero
 lxc.cgroup.devices.allow                = c 1:3 rwm
-# /dev/zero
 lxc.cgroup.devices.allow                = c 1:5 rwm
-# /dev/tty[1-4] consoles
+# consoles
 lxc.cgroup.devices.allow                = c 5:1 rwm
 lxc.cgroup.devices.allow                = c 5:0 rwm
 lxc.cgroup.devices.allow                = c 4:0 rwm
@@ -258,39 +224,22 @@
 lxc.cgroup.devices.allow                = c 1:8 rwm
 lxc.cgroup.devices.allow                = c 136:* rwm
 lxc.cgroup.devices.allow                = c 5:2 rwm
-# /dev/rtc
+# rtc
 lxc.cgroup.devices.allow                = c 254:0 rwm
 
-## Limits
-#lxc.cgroup.cpu.shares                  = 1024
-#lxc.cgroup.cpuset.cpus                 = 0
-#lxc.cgroup.memory.limit_in_bytes       = 256M
-#lxc.cgroup.memory.memsw.limit_in_bytes = 1G
-
-## Filesystem
-lxc.mount.entry                         = proc $rootfs/proc proc nodev,noexec,nosuid 0 0
-lxc.mount.entry                         = sysfs $rootfs/sys sysfs defaults,ro 0 0
-EOF
+# mounts point
+lxc.mount.entry=proc $rootfs/proc proc nodev,noexec,nosuid 0 0
+lxc.mount.entry=devpts $rootfs/dev/pts devpts defaults 0 0
+lxc.mount.entry=sysfs $rootfs/sys sysfs defaults  0 0
 
-    # Adding shared data directory if existing
-    if [ -d /srv/share/$hostname ]; then
-	echo "lxc.mount.entry                         = /srv/share/$hostname $rootfs/srv/$hostname none defaults,bind 0 0" >> $path/config
-    else
-	echo "#lxc.mount.entry                        = /srv/share/$hostname $rootfs/srv/$hostname none defaults,bind 0 0" >> $path/config
-    fi
-
-    cat >> $path/config << EOF
-
-#lxc.mount.entry                        = /srv/$name $rootfs/srv/$name none defaults,bind 0 0
+# networking
 
-## Network
+lxc.utsname = $name
 lxc.network.type                        = veth
 lxc.network.flags                       = up
-lxc.network.hwaddr                      = 11:22:33:44:55:66
 lxc.network.link                        = br0
-lxc.network.mtu                         = 1500
-lxc.network.name                        = eth0
-lxc.network.veth.pair                   = veth-$name
+lxc.network.ipv4 = 0.0.0.0/24
+lxc.network.hwaddr = 00:1E:$(hex):$(hex):$(hex):$(hex)
 EOF
 
     if [ $? -ne 0 ]; then
@@ -301,9 +250,15 @@
     return 0
 }
 
+# nice trick from: http://mindref.blogspot.com/2011/01/debian-lxc-create.html
+hex() 
+{
+    echo "`tr -dc A-F0-9 < /dev/urandom | head -c 2 | xargs`"
+}
+    
 clean()
 {
-    cache="/var/cache/lxc/debian"
+    cache="/var/cache/lxc/debian-wheezy"
 
     if [ ! -e $cache ]; then
 	exit 0
@@ -356,7 +311,7 @@
     exit 0
 fi
 
-type debootstrap >/dev/null 2>&1
+type debootstrap
 if [ $? -ne 0 ]; then
     echo "'debootstrap' command is missing"
     exit 1
@@ -386,7 +341,7 @@
     exit 1
 fi
 
-copy_configuration $path $rootfs
+copy_configuration $path $rootfs $name
 if [ $? -ne 0 ]; then
     echo "failed write configuration file"
     exit 1
